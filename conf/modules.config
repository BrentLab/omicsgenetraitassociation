/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: MMAP {
      publishDir = [
        path: { "${params.outdir}/mmap/mmap" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.endsWith('.poly.cov.csv') ? filename : null }
      ]
    }

    withName: MMAP_PARSE {
      publishDir = [
        path: { "${params.outdir}/mmap" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.startsWith('parsed_output_') ? filename : null }
      ]
    }

    withName: PREPROCESS_PASCAL {
      publishDir = [
        path: { "${params.outdir}/mea" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename } 
      ]
    }

    withName: RUN_PASCAL {
      publishDir = [
        path: { "${params.outdir}/mea" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> 
            if (filename.equals('versions.yml')) { null } 
            else if (filename.startsWith('GO_')) { null }
            else if (filename.startsWith('GS_')) { null }
            else { filename } 
        }
      ]
    }

    withName: POSTPROCESS_PASCAL {
      publishDir = [
        path: { "${params.outdir}/mea" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> 
            if (filename.equals('versions.yml')) { null } 
            else if (filename.startsWith('GO_')) { null }
            else if (filename.startsWith('GS_')) { null }
            else { filename } 
        }
      ]
    }

    withName: GO_ANALYSIS {
      publishDir = [
        path: { "${params.outdir}/mea/" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> 
            if (filename.equals('versions.yml')) { null } 
            else if (filename.endsWith(".txt")) { null }
            else if (filename.startsWith('GS_')) { null }
            else { filename } 
        }
      ]
    }

    withName: MERGE_ORA_AND_SUMMARY {
      publishDir = [
        path: { "${params.outdir}/mea/" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> 
            if (filename.equals('versions.yml')) { null } 
            else if (filename.startsWith('GO_')) { null }
            else if (filename.startsWith('GS_')) { null }
            else { filename } 
        }
      ]
    }

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    //withName: FASTQC {
    //    ext.args = '--quiet'
    //}

    //withName: CUSTOM_DUMPSOFTWAREVERSIONS {
    //    publishDir = [
    //        path: { "${params.outdir}/pipeline_info" },
    //        mode: params.publish_dir_mode,
    //        pattern: '*_versions.yml'
    //    ]
    //}

    //withName: 'MULTIQC' {
    //    ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
    //    publishDir = [
    //        path: { "${params.outdir}/multiqc" },
    //        mode: params.publish_dir_mode,
    //        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    //    ]
    //}
}
